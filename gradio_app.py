#!/usr/bin/env python3
"""
Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å–∏–ª–∏—è
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∂–µ—Å—Ç–æ–∫–æ—Å—Ç–∏
"""

import gradio as gr
import torch
import numpy as np
import matplotlib.pyplot as plt
import tempfile
import os
import sys
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
from test import VideoViolenceClassifier


class GradioViolenceClassifier:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    
    def __init__(self, model_path, scaler_audio_path, scaler_visual_path, device='auto'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è Gradio
        
        Args:
            model_path: –ü—É—Ç—å –∫ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            scaler_audio_path: –ü—É—Ç—å –∫ —Å–∫–µ–π–ª–µ—Ä—É –∞—É–¥–∏–æ —Ñ–∏—á–µ–π
            scaler_visual_path: –ü—É—Ç—å –∫ —Å–∫–µ–π–ª–µ—Ä—É –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Ñ–∏—á–µ–π
            device: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        """
        self.classifier = VideoViolenceClassifier(
            model_path=model_path,
            scaler_audio_path=scaler_audio_path,
            scaler_visual_path=scaler_visual_path,
            device=device
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ matplotlib –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        plt.rcParams['font.family'] = ['DejaVu Sans', 'Liberation Sans', 'Arial']
        plt.rcParams['axes.unicode_minus'] = False
    
    def classify_video_simple(self, video_file):
        """
        –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∏–¥–µ–æ
        
        Args:
            video_file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª
            
        Returns:
            tuple: (—Ä–µ–∑—É–ª—å—Ç–∞—Ç, None) - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Gradio
        """
        if video_file is None:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª", None
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            video_path = video_file.name if hasattr(video_file, 'name') else str(video_file)
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
            class_name, probabilities = self.classifier.classify_video(
                video_path, return_probabilities=True
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = f"**–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {class_name}**\n\n"
            result += f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:\n"
            result += f"- Non-Violent: {probabilities[0]:.4f} ({probabilities[0]*100:.1f}%)\n"
            result += f"- Violent: {probabilities[1]:.4f} ({probabilities[1]*100:.1f}%)\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
            if probabilities[1] > 0.7:
                result += "üî¥ **–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–∏–ª–∏—è**"
            elif probabilities[1] > 0.5:
                result += "üü° **–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–∏–ª–∏—è**"
            else:
                result += "üü¢ **–ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–∏–ª–∏—è**"
            
            return result, None
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}", None
    
    def classify_video_with_graph(self, video_file, batch_size, overlap):
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞ –∂–µ—Å—Ç–æ–∫–æ—Å—Ç–∏
        
        Args:
            video_file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤)
            overlap: –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            
        Returns:
            tuple: (—Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≥—Ä–∞—Ñ–∏–∫)
        """
        if video_file is None:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª", None
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            video_path = video_file.name if hasattr(video_file, 'name') else str(video_file)
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –ø–æ –±–∞—Ç—á–∞–º
            overall_class, batch_probs, time_stamps = self.classifier.classify_video_batch(
                video_path, batch_size=batch_size, overlap=overlap
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = f"**–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {overall_class}**\n\n"
            result += f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:\n"
            result += f"- –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–∏–ª–∏—è: {np.mean(batch_probs):.4f}\n"
            result += f"- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {np.max(batch_probs):.4f}\n"
            result += f"- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {np.min(batch_probs):.4f}\n"
            result += f"- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(batch_probs):.4f}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
            avg_prob = np.mean(batch_probs)
            if avg_prob > 0.7:
                result += "üî¥ **–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–∏–ª–∏—è –≤ –≤–∏–¥–µ–æ**"
            elif avg_prob > 0.5:
                result += "üü° **–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–∏–ª–∏—è –≤ –≤–∏–¥–µ–æ**"
            else:
                result += "üü¢ **–ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–∏–ª–∏—è –≤ –≤–∏–¥–µ–æ**"
            
            # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
            fig, ax = plt.subplots(figsize=(12, 6))
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
            ax.plot(time_stamps, batch_probs, 'b-', linewidth=2, label='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–∏–ª–∏—è')
            ax.axhline(y=0.5, color='r', linestyle='--', alpha=0.7, label='–ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏')
            
            # –ó–∞–ª–∏–≤–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π
            ax.fill_between(time_stamps, batch_probs, 0.5, 
                           where=np.array(batch_probs) >= 0.5, 
                           color='red', alpha=0.2, label='–ó–æ–Ω–∞ –Ω–∞—Å–∏–ª–∏—è')
            ax.fill_between(time_stamps, batch_probs, 0.5, 
                           where=np.array(batch_probs) < 0.5, 
                           color='green', alpha=0.2, label='–ó–æ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
            ax.set_xlabel('–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)', fontsize=12)
            ax.set_ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–∏–ª–∏—è', fontsize=12)
            ax.set_title('–ì—Ä–∞—Ñ–∏–∫ –∂–µ—Å—Ç–æ–∫–æ—Å—Ç–∏ –≤ –≤–∏–¥–µ–æ', fontsize=14, fontweight='bold')
            ax.legend(fontsize=10)
            ax.grid(True, alpha=0.3)
            ax.set_ylim(0, 1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–∏–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            max_idx = np.argmax(batch_probs)
            min_idx = np.argmin(batch_probs)
            
            ax.annotate(f'–ú–∞–∫—Å: {batch_probs[max_idx]:.3f}', 
                       xy=(time_stamps[max_idx], batch_probs[max_idx]),
                       xytext=(10, 10), textcoords='offset points',
                       bbox=dict(boxstyle='round,pad=0.3', facecolor='red', alpha=0.7),
                       arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'))
            
            ax.annotate(f'–ú–∏–Ω: {batch_probs[min_idx]:.3f}', 
                       xy=(time_stamps[min_idx], batch_probs[min_idx]),
                       xytext=(10, -20), textcoords='offset points',
                       bbox=dict(boxstyle='round,pad=0.3', facecolor='green', alpha=0.7),
                       arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0'))
            
            plt.tight_layout()
            
            return result, fig
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}", None


def create_gradio_interface():
    """–°–æ–∑–¥–∞–Ω–∏–µ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏
    model_path = "models/best_model.pth"
    scaler_audio_path = "models/scaler_audio.pkl"
    scaler_visual_path = "models/scaler_visual.pkl"
    
    if not all(os.path.exists(path) for path in [model_path, scaler_audio_path, scaler_visual_path]):
        print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Å–∫–µ–π–ª–µ—Ä–æ–≤")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—É—Ç—è—Ö:")
        print(f"- {model_path}")
        print(f"- {scaler_audio_path}")
        print(f"- {scaler_visual_path}")
        return None
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    try:
        gradio_classifier = GradioViolenceClassifier(
            model_path=model_path,
            scaler_audio_path=scaler_audio_path,
            scaler_visual_path=scaler_visual_path,
            device='auto'
        )
        print("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {e}")
        return None
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    with gr.Blocks(
        title="–î–µ—Ç–µ–∫—Ç–æ—Ä –Ω–∞—Å–∏–ª–∏—è –≤ –≤–∏–¥–µ–æ",
        theme=gr.themes.Soft(),
        css="""
        .gradio-container {
            max-width: 1200px !important;
        }
        .main-header {
            text-align: center;
            margin-bottom: 30px;
        }
        .result-box {
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            padding: 20px;
            margin: 10px 0;
        }
        """
    ) as interface:
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        gr.HTML("""
        <div class="main-header">
            <h1>üé¨ –î–µ—Ç–µ–∫—Ç–æ—Ä –Ω–∞—Å–∏–ª–∏—è –≤ –≤–∏–¥–µ–æ</h1>
            <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å–∏–ª–∏—è —Å –ø–æ–º–æ—â—å—é –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏</p>
        </div>
        """)
        
        with gr.Tabs():
            # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            with gr.Tab("üîç –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"):
                gr.Markdown("""
                ### –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∏–¥–µ–æ
                –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ Violent/Non-Violent
                """)
                
                with gr.Row():
                    with gr.Column(scale=1):
                        simple_video = gr.File(
                            label="–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ",
                            file_types=["video"]
                        )
                        simple_btn = gr.Button("–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å", variant="primary", size="lg")
                    
                    with gr.Column(scale=2):
                        simple_result = gr.Markdown(
                            label="–†–µ–∑—É–ª—å—Ç–∞—Ç",
                            value="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                        )
                
                simple_btn.click(
                    fn=gradio_classifier.classify_video_simple,
                    inputs=[simple_video],
                    outputs=[simple_result, gr.Plot(visible=False)]
                )
            
            # –í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
            with gr.Tab("üìä –ê–Ω–∞–ª–∏–∑ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º"):
                gr.Markdown("""
                ### –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∂–µ—Å—Ç–æ–∫–æ—Å—Ç–∏
                –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —Å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–∞—Å–∏–ª–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                """)
                
                with gr.Row():
                    with gr.Column(scale=1):
                        graph_video = gr.File(
                            label="–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ",
                            file_types=["video"]
                        )
                        
                        with gr.Group():
                            gr.Markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:**")
                            batch_size = gr.Slider(
                                minimum=5,
                                maximum=50,
                                value=15,
                                step=1,
                                label="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–∫–∞–¥—Ä—ã)",
                                info="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ–¥–Ω–æ–º –±–∞—Ç—á–µ"
                            )
                            overlap = gr.Slider(
                                minimum=0.0,
                                maximum=0.9,
                                value=0.3,
                                step=0.1,
                                label="–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –±–∞—Ç—á–µ–π",
                                info="–°—Ç–µ–ø–µ–Ω—å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ –±–∞—Ç—á–∞–º–∏"
                            )
                        
                        graph_btn = gr.Button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –≥—Ä–∞—Ñ–∏–∫–æ–º", variant="primary", size="lg")
                    
                    with gr.Column(scale=2):
                        graph_result = gr.Markdown(
                            label="–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞",
                            value="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
                        )
                        graph_plot = gr.Plot(
                            label="–ì—Ä–∞—Ñ–∏–∫ –∂–µ—Å—Ç–æ–∫–æ—Å—Ç–∏",
                            value=None
                        )
                
                graph_btn.click(
                    fn=gradio_classifier.classify_video_with_graph,
                    inputs=[graph_video, batch_size, overlap],
                    outputs=[graph_result, graph_plot]
                )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è
        with gr.Accordion("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏", open=False):
            gr.Markdown("""
            ### –û –º–æ–¥–µ–ª–∏
            
            **–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å** –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –Ω–∞—Å–∏–ª–∏—è –≤ –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç:
            
            - **–ê—É–¥–∏–æ —Ñ–∏—á–∏**: MFCC –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã, —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            - **–í–∏–∑—É–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏**: CNN —Ñ–∏—á–∏ (ResNet50), —Ü–≤–µ—Ç–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Ç–µ–∫—Å—Ç—É—Ä—ã, –¥–≤–∏–∂–µ–Ω–∏–µ
            - **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞**: Attention-based fusion –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π
            
            **–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏:**
            - –¢–æ—á–Ω–æ—Å—Ç—å: 88.8%
            - F1-–º–µ—Ä–∞: 88.8%
            - AUC-ROC: 94.2%
            
            **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–∏–¥–µ–æ:**
            - MP4, AVI, MOV, MKV –∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ OpenCV
            
            **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
            - –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫—É
            - –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 10-60 —Å–µ–∫—É–Ω–¥
            - –î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∏–¥–µ–æ —Å —á–µ—Ç–∫–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∑–≤—É–∫–æ–º
            """)
        
        # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        with gr.Accordion("üìù –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", open=False):
            gr.Markdown("""
            ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            
            1. **–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:**
               - –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
               - –ù–∞–∂–º–∏—Ç–µ "–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å"
               - –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: Violent –∏–ª–∏ Non-Violent —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
            
            2. **–ê–Ω–∞–ª–∏–∑ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º:**
               - –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
               - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ (—Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞, –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ)
               - –ù–∞–∂–º–∏—Ç–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –≥—Ä–∞—Ñ–∏–∫–æ–º"
               - –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∂–µ—Å—Ç–æ–∫–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            
            ### –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
            - **üü¢ –ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (0-0.5)**: –í–∏–¥–µ–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å–∏–ª–∏—è
            - **üü° –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (0.5-0.7)**: –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            - **üî¥ –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (0.7-1.0)**: –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–ª–∏—á–∏—è –Ω–∞—Å–∏–ª–∏—è –≤ –≤–∏–¥–µ–æ
            """)
    
    return interface


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Gradio –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("–ó–∞–ø—É—Å–∫ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –Ω–∞—Å–∏–ª–∏—è –≤ –≤–∏–¥–µ–æ...")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    interface = create_gradio_interface()
    
    if interface is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏.")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    try:
        interface.launch(
            server_name="0.0.0.0",  # –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö IP
            server_port=7861,       # –ü–æ—Ä—Ç (–∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 7861)
            share=True,             # C–æ–∑–¥–∞–≤–∞—Ç—å –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
            debug=False,            # –û—Ç–∫–ª—é—á–∏—Ç—å debug —Ä–µ–∂–∏–º
            show_error=True,        # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏
            quiet=False             # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–æ–≥–∏
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
