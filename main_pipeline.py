#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å–µ–π –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞—Å–∏–ª–∏—è
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ (–∞—É–¥–∏–æ + –≤–∏–¥–µ–æ)
"""

import os
import sys
import argparse
import time
from pathlib import Path
import torch
import warnings
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from audio_features import process_video_audio_features
from visual_features import process_video_visual_features
from train_model import train_multimodal_model
from test_model import test_multimodal_model


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_packages = [
        ('torch', 'torch'),
        ('torchvision', 'torchvision'), 
        ('torchaudio', 'torchaudio'),
        ('librosa', 'librosa'),
        ('opencv-python', 'cv2'),
        ('scikit-learn', 'sklearn'),
        ('pandas', 'pandas'),
        ('numpy', 'numpy'),
        ('matplotlib', 'matplotlib'),
        ('seaborn', 'seaborn'),
        ('tqdm', 'tqdm'),
        ('moviepy', 'moviepy'),
        ('PIL', 'PIL')
    ]
    
    missing_packages = []
    for package_name, import_name in required_packages:
        try:
            __import__(import_name)
        except ImportError:
            missing_packages.append(package_name)
    
    if missing_packages:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã:")
        for package in missing_packages:
            print(f"   - {package}")
        print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True


def check_data_files(df_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    if not os.path.exists(df_path):
        print(f"‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {df_path}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    df_dir = Path(df_path).parent
    video_dir = "Movie_Clip_Dataset_A_New_Dataset_for Generalised_Real_World_Violence_Detection"
    
    if not os.path.exists(os.path.join(df_dir, video_dir)):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {video_dir}")
        return False
    
    print("‚úÖ –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω—ã")
    return True


def extract_features(df_path, max_frames=30, force_extract=False):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏—á–µ–π –∏–∑ –≤–∏–¥–µ–æ"""
    print("\n" + "="*60)
    print("–®–ê–ì 1: –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –§–ò–ß–ï–ô")
    print("="*60)
    
    audio_features_path = "audio_features/audio_features.pkl"
    visual_features_path = "visual_features/visual_features.pkl"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å —Ñ–∏—á–∏
    if not force_extract and os.path.exists(audio_features_path) and os.path.exists(visual_features_path):
        print("‚úÖ –§–∏—á–∏ —É–∂–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force-extract –¥–ª—è –ø–µ—Ä–µ–∏–∑–≤–ª–µ—á–µ–Ω–∏—è.")
        return audio_features_path, visual_features_path
    
    print("üéµ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∏—á–µ–π...")
    start_time = time.time()
    audio_features = process_video_audio_features(df_path, output_dir="audio_features")
    audio_time = time.time() - start_time
    print(f"‚è±Ô∏è  –ê—É–¥–∏–æ —Ñ–∏—á–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∑–∞ {audio_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    print("\nüé¨ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Ñ–∏—á–µ–π...")
    start_time = time.time()
    visual_features = process_video_visual_features(df_path, output_dir="visual_features", max_frames=max_frames)
    visual_time = time.time() - start_time
    print(f"‚è±Ô∏è  –í–∏–∑—É–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∑–∞ {visual_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    total_time = audio_time + visual_time
    print(f"\n‚úÖ –í—Å–µ —Ñ–∏—á–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    return audio_features_path, visual_features_path


def train_model(audio_features_path, visual_features_path, df_path, 
                num_epochs=50, batch_size=16, learning_rate=0.001, force_train=False):
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    print("\n" + "="*60)
    print("–®–ê–ì 2: –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò")
    print("="*60)
    
    model_path = "models/best_model.pth"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å
    if not force_train and os.path.exists(model_path):
        print("‚úÖ –ú–æ–¥–µ–ª—å —É–∂–µ –æ–±—É—á–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force-train –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è.")
        return model_path
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    print(f"   - –≠–ø–æ—Ö: {num_epochs}")
    print(f"   - –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
    print(f"   - –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: {learning_rate}")
    
    start_time = time.time()
    model, history, test_loader = train_multimodal_model(
        audio_features_path=audio_features_path,
        visual_features_path=visual_features_path,
        df_path=df_path,
        num_epochs=num_epochs,
        batch_size=batch_size,
        learning_rate=learning_rate,
        save_dir="models"
    )
    train_time = time.time() - start_time
    
    print(f"‚è±Ô∏è  –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∑–∞ {train_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"‚úÖ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {model_path}")
    
    return model_path


def test_model(model_path, audio_features_path, visual_features_path, df_path):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    print("\n" + "="*60)
    print("–®–ê–ì 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò")
    print("="*60)
    
    scaler_audio_path = "models/scaler_audio.pkl"
    scaler_visual_path = "models/scaler_visual.pkl"
    
    if not os.path.exists(scaler_audio_path) or not os.path.exists(scaler_visual_path):
        print("‚ùå –°–∫–µ–π–ª–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
        return None
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ...")
    start_time = time.time()
    
    metrics, results_df, report = test_multimodal_model(
        model_path=model_path,
        audio_features_path=audio_features_path,
        visual_features_path=visual_features_path,
        df_path=df_path,
        scaler_audio_path=scaler_audio_path,
        scaler_visual_path=scaler_visual_path,
        save_dir="test_results"
    )
    
    test_time = time.time() - start_time
    
    print(f"‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {test_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ test_results/")
    
    # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –û–°–ù–û–í–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   - –¢–æ—á–Ω–æ—Å—Ç—å: {metrics['accuracy']:.4f}")
    print(f"   - F1-–º–µ—Ä–∞: {metrics['f1_score']:.4f}")
    print(f"   - AUC-ROC: {metrics['auc_roc']:.4f}")
    
    return metrics, results_df, report


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞—Å–∏–ª–∏—è –≤ –≤–∏–¥–µ–æ')
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--df-path', type=str, default='df.csv',
                       help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏')
    parser.add_argument('--max-frames', type=int, default=30,
                       help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
    parser.add_argument('--epochs', type=int, default=50,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è')
    parser.add_argument('--batch-size', type=int, default=16,
                       help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞')
    parser.add_argument('--learning-rate', type=float, default=0.001,
                       help='–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è')
    
    # –§–ª–∞–≥–∏
    parser.add_argument('--force-extract', action='store_true',
                       help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏—á–µ–π')
    parser.add_argument('--force-train', action='store_true',
                       help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏')
    parser.add_argument('--skip-extract', action='store_true',
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏—á–µ–π')
    parser.add_argument('--skip-train', action='store_true',
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏')
    parser.add_argument('--skip-test', action='store_true',
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏')
    
    # –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
    parser.add_argument('--extract-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏—á–µ–π')
    parser.add_argument('--train-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏')
    parser.add_argument('--test-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏')
    
    args = parser.parse_args()
    
    print("üé¨ –ú–£–õ–¨–¢–ò–ú–û–î–ê–õ–¨–ù–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –ù–ê–°–ò–õ–ò–Ø –í –í–ò–î–ï–û")
    print("="*60)
    print(f"üìÅ –î–∞–Ω–Ω—ã–µ: {args.df_path}")
    print(f"üéûÔ∏è  –ú–∞–∫—Å–∏–º—É–º –∫–∞–¥—Ä–æ–≤: {args.max_frames}")
    print(f"üöÄ –≠–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è: {args.epochs}")
    print(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {args.batch_size}")
    print(f"üìà –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: {args.learning_rate}")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if not check_data_files(args.df_path):
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    print(f"üñ•Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    
    start_time = time.time()
    
    try:
        # –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏—á–µ–π
        if not args.skip_extract and not args.train_only and not args.test_only:
            audio_features_path, visual_features_path = extract_features(
                args.df_path, args.max_frames, args.force_extract
            )
        else:
            audio_features_path = "audio_features/audio_features.pkl"
            visual_features_path = "visual_features/visual_features.pkl"
        
        if args.extract_only:
            print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return
        
        # –®–∞–≥ 2: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        if not args.skip_train and not args.extract_only and not args.test_only:
            model_path = train_model(
                audio_features_path, visual_features_path, args.df_path,
                args.epochs, args.batch_size, args.learning_rate, args.force_train
            )
        else:
            model_path = "models/best_model.pth"
        
        if args.train_only:
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        if not args.skip_test and not args.extract_only and not args.train_only:
            test_model(model_path, audio_features_path, visual_features_path, args.df_path)
        
        total_time = time.time() - start_time
        print(f"\nüéâ –í–°–ï –≠–¢–ê–ü–´ –ó–ê–í–ï–†–®–ï–ù–´ –ó–ê {total_time:.2f} –°–ï–ö–£–ù–î")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        print("\nüìÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–û–•–†–ê–ù–ï–ù–´ –í:")
        print("   - audio_features/ - –∞—É–¥–∏–æ —Ñ–∏—á–∏")
        print("   - visual_features/ - –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏")
        print("   - models/ - –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å")
        print("   - test_results/ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
